// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// QUV
double QUV(const arma::colvec& SS, const arma::colvec& RR, const arma::mat& U, const arma::mat& V, const arma::mat& W, const arma::mat& Pmk, const arma::rowvec& Pk, const arma::mat& Pmki1, const arma::mat& Pmki2, const double& tauS, const double& tauR, const double& tauU, const double& tauV, const IntegerMatrix& EE);
RcppExport SEXP _aLSEC_QUV(SEXP SSSEXP, SEXP RRSEXP, SEXP USEXP, SEXP VSEXP, SEXP WSEXP, SEXP PmkSEXP, SEXP PkSEXP, SEXP Pmki1SEXP, SEXP Pmki2SEXP, SEXP tauSSEXP, SEXP tauRSEXP, SEXP tauUSEXP, SEXP tauVSEXP, SEXP EESEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type SS(SSSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type RR(RRSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Pmk(PmkSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Pk(PkSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Pmki1(Pmki1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Pmki2(Pmki2SEXP);
    Rcpp::traits::input_parameter< const double& >::type tauS(tauSSEXP);
    Rcpp::traits::input_parameter< const double& >::type tauR(tauRSEXP);
    Rcpp::traits::input_parameter< const double& >::type tauU(tauUSEXP);
    Rcpp::traits::input_parameter< const double& >::type tauV(tauVSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type EE(EESEXP);
    rcpp_result_gen = Rcpp::wrap(QUV(SS, RR, U, V, W, Pmk, Pk, Pmki1, Pmki2, tauS, tauR, tauU, tauV, EE));
    return rcpp_result_gen;
END_RCPP
}
// QW
double QW(const arma::colvec& SS, const arma::colvec& RR, const arma::mat& U, const arma::mat& V, const arma::mat& W, const arma::mat& Pmk, const arma::rowvec& Pk, const IntegerMatrix& EE);
RcppExport SEXP _aLSEC_QW(SEXP SSSEXP, SEXP RRSEXP, SEXP USEXP, SEXP VSEXP, SEXP WSEXP, SEXP PmkSEXP, SEXP PkSEXP, SEXP EESEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type SS(SSSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type RR(RRSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Pmk(PmkSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Pk(PkSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type EE(EESEXP);
    rcpp_result_gen = Rcpp::wrap(QW(SS, RR, U, V, W, Pmk, Pk, EE));
    return rcpp_result_gen;
END_RCPP
}
// computeELBO
double computeELBO(const arma::colvec& SS, const arma::colvec& RR, const arma::mat& U, const arma::mat& V, const arma::mat& W, const arma::mat& Pmk, const arma::rowvec& Pk, const arma::rowvec& Elog_pi_k, const arma::rowvec& alphaTld, const double& alpha, const IntegerMatrix& EE);
RcppExport SEXP _aLSEC_computeELBO(SEXP SSSEXP, SEXP RRSEXP, SEXP USEXP, SEXP VSEXP, SEXP WSEXP, SEXP PmkSEXP, SEXP PkSEXP, SEXP Elog_pi_kSEXP, SEXP alphaTldSEXP, SEXP alphaSEXP, SEXP EESEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type SS(SSSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type RR(RRSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Pmk(PmkSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Pk(PkSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Elog_pi_k(Elog_pi_kSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type alphaTld(alphaTldSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type EE(EESEXP);
    rcpp_result_gen = Rcpp::wrap(computeELBO(SS, RR, U, V, W, Pmk, Pk, Elog_pi_k, alphaTld, alpha, EE));
    return rcpp_result_gen;
END_RCPP
}
// computePmk
arma::mat computePmk(const arma::colvec& SS, const arma::colvec& RR, const arma::mat& U, const arma::mat& V, const arma::mat& W, const arma::rowvec& pi_k, const IntegerMatrix& EE);
RcppExport SEXP _aLSEC_computePmk(SEXP SSSEXP, SEXP RRSEXP, SEXP USEXP, SEXP VSEXP, SEXP WSEXP, SEXP pi_kSEXP, SEXP EESEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type SS(SSSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type RR(RRSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type pi_k(pi_kSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type EE(EESEXP);
    rcpp_result_gen = Rcpp::wrap(computePmk(SS, RR, U, V, W, pi_k, EE));
    return rcpp_result_gen;
END_RCPP
}
// dCondLik
Rcpp::List dCondLik(const arma::colvec& SS, const arma::colvec& RR, const arma::mat& U, const arma::mat& V, const arma::mat& W, const IntegerVector& z, const IntegerMatrix& EE, const arma::colvec& n_k, const IntegerVector& Mi1Index, const IntegerMatrix& Mi1, const IntegerVector& Mi2Index, const IntegerMatrix& Mi2);
RcppExport SEXP _aLSEC_dCondLik(SEXP SSSEXP, SEXP RRSEXP, SEXP USEXP, SEXP VSEXP, SEXP WSEXP, SEXP zSEXP, SEXP EESEXP, SEXP n_kSEXP, SEXP Mi1IndexSEXP, SEXP Mi1SEXP, SEXP Mi2IndexSEXP, SEXP Mi2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type SS(SSSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type RR(RRSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type EE(EESEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type n_k(n_kSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type Mi1Index(Mi1IndexSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type Mi1(Mi1SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type Mi2Index(Mi2IndexSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type Mi2(Mi2SEXP);
    rcpp_result_gen = Rcpp::wrap(dCondLik(SS, RR, U, V, W, z, EE, n_k, Mi1Index, Mi1, Mi2Index, Mi2));
    return rcpp_result_gen;
END_RCPP
}
// dQUV
arma::mat dQUV(const arma::colvec& SS, const arma::colvec& RR, const arma::mat& U, const arma::mat& V, const arma::mat& W, const arma::mat& Pmk, const arma::rowvec& Pk, const arma::mat& Pmki1, const arma::mat& Pmki2, const double& tauS, const double& tauR, const double& tauU, const double& tauV, const IntegerMatrix& EE, const IntegerVector& Mi1Index, const IntegerMatrix& Mi1);
RcppExport SEXP _aLSEC_dQUV(SEXP SSSEXP, SEXP RRSEXP, SEXP USEXP, SEXP VSEXP, SEXP WSEXP, SEXP PmkSEXP, SEXP PkSEXP, SEXP Pmki1SEXP, SEXP Pmki2SEXP, SEXP tauSSEXP, SEXP tauRSEXP, SEXP tauUSEXP, SEXP tauVSEXP, SEXP EESEXP, SEXP Mi1IndexSEXP, SEXP Mi1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type SS(SSSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type RR(RRSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Pmk(PmkSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Pk(PkSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Pmki1(Pmki1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Pmki2(Pmki2SEXP);
    Rcpp::traits::input_parameter< const double& >::type tauS(tauSSEXP);
    Rcpp::traits::input_parameter< const double& >::type tauR(tauRSEXP);
    Rcpp::traits::input_parameter< const double& >::type tauU(tauUSEXP);
    Rcpp::traits::input_parameter< const double& >::type tauV(tauVSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type EE(EESEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type Mi1Index(Mi1IndexSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type Mi1(Mi1SEXP);
    rcpp_result_gen = Rcpp::wrap(dQUV(SS, RR, U, V, W, Pmk, Pk, Pmki1, Pmki2, tauS, tauR, tauU, tauV, EE, Mi1Index, Mi1));
    return rcpp_result_gen;
END_RCPP
}
// dQW
arma::mat dQW(const arma::colvec& SS, const arma::colvec& RR, const arma::mat& U, const arma::mat& V, const arma::mat& W, const arma::mat& Pmk, const arma::rowvec& Pk, const IntegerMatrix& EE);
RcppExport SEXP _aLSEC_dQW(SEXP SSSEXP, SEXP RRSEXP, SEXP USEXP, SEXP VSEXP, SEXP WSEXP, SEXP PmkSEXP, SEXP PkSEXP, SEXP EESEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type SS(SSSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type RR(RRSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Pmk(PmkSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Pk(PkSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type EE(EESEXP);
    rcpp_result_gen = Rcpp::wrap(dQW(SS, RR, U, V, W, Pmk, Pk, EE));
    return rcpp_result_gen;
END_RCPP
}
// evalConditionalLik
double evalConditionalLik(const IntegerVector& z, const arma::colvec& SS, const arma::colvec& RR, const arma::mat& U, const arma::mat& V, const arma::mat& W, const IntegerMatrix& EE);
RcppExport SEXP _aLSEC_evalConditionalLik(SEXP zSEXP, SEXP SSSEXP, SEXP RRSEXP, SEXP USEXP, SEXP VSEXP, SEXP WSEXP, SEXP EESEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type SS(SSSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type RR(RRSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type EE(EESEXP);
    rcpp_result_gen = Rcpp::wrap(evalConditionalLik(z, SS, RR, U, V, W, EE));
    return rcpp_result_gen;
END_RCPP
}
// getPmki
arma::mat getPmki(const arma::mat& Pmk, const IntegerVector& Mi1Index, const IntegerMatrix& Mi1);
RcppExport SEXP _aLSEC_getPmki(SEXP PmkSEXP, SEXP Mi1IndexSEXP, SEXP Mi1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Pmk(PmkSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type Mi1Index(Mi1IndexSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type Mi1(Mi1SEXP);
    rcpp_result_gen = Rcpp::wrap(getPmki(Pmk, Mi1Index, Mi1));
    return rcpp_result_gen;
END_RCPP
}
// indexEdges
Rcpp::List indexEdges(const IntegerMatrix& EE, const int& n);
RcppExport SEXP _aLSEC_indexEdges(SEXP EESEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type EE(EESEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(indexEdges(EE, n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_aLSEC_QUV", (DL_FUNC) &_aLSEC_QUV, 14},
    {"_aLSEC_QW", (DL_FUNC) &_aLSEC_QW, 8},
    {"_aLSEC_computeELBO", (DL_FUNC) &_aLSEC_computeELBO, 11},
    {"_aLSEC_computePmk", (DL_FUNC) &_aLSEC_computePmk, 7},
    {"_aLSEC_dCondLik", (DL_FUNC) &_aLSEC_dCondLik, 12},
    {"_aLSEC_dQUV", (DL_FUNC) &_aLSEC_dQUV, 16},
    {"_aLSEC_dQW", (DL_FUNC) &_aLSEC_dQW, 8},
    {"_aLSEC_evalConditionalLik", (DL_FUNC) &_aLSEC_evalConditionalLik, 7},
    {"_aLSEC_getPmki", (DL_FUNC) &_aLSEC_getPmki, 3},
    {"_aLSEC_indexEdges", (DL_FUNC) &_aLSEC_indexEdges, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_aLSEC(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
