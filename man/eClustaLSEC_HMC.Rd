% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/eClustaLSEC_HMC.R
\name{eClustaLSEC_HMC}
\alias{eClustaLSEC_HMC}
\title{Automated edge clustering via Hamiltonian Monte Carlo}
\usage{
eClustaLSEC_HMC(
  A,
  GEMObj = NULL,
  K = NULL,
  p = NULL,
  stepSize = NULL,
  numSteps = 25,
  nSims = 1000,
  Thin = 5,
  showPB = TRUE,
  tuningMethod = c("auto", "none"),
  autoTune_n = 250,
  autoTune_bounds = 0.65 + c(-1, 1) * 0.1,
  max_autoTune_count = 100,
  a_u = 0.1,
  b_u = 0.1,
  a_v = a_u,
  b_v = b_u,
  a_s = 0.1,
  b_s = 0.1,
  a_r = a_s,
  b_r = b_s,
  a_a = 1,
  b_a = 200
)
}
\arguments{
\item{A}{igraph object}

\item{GEMObj}{Object of class 'eClustaLSEC_GEM'.  If not supplied, the GEM algorithm
will run to initialize the HMC.}

\item{K}{integer. Upper truncation on the number of clusters.  Will be extracted from GEMObj if supplied.}

\item{p}{integer. Dimension of latent space.  Will be extracted from GEMObj if supplied.}

\item{stepSize}{numeric. Step size for HMC.}

\item{numSteps}{integer. Number of leapfrog steps for HMC.}

\item{nSims}{integer. Number of posterior draws to be obtained through HMC}

\item{Thin}{integer. Only each \code{Thin}-th sample will be saved.}

\item{showPB}{logical. Whether or not to show the progress bar.}

\item{tuningMethod}{One of 'auto' or 'none'. If 'auto', pilot runs will be used to
obtain an acceptance rate within \code{autoTune_bounds}.}

\item{autoTune_n}{integer. The number of posterior samples used in each pilot run to
estimate the acceptance rate if auto-tuning.}

\item{autoTune_bounds}{numeric vector. The lower and upper bounds of desired acceptance
rates if auto-tuning.  Note that an acceptance rate during a pilot run does not guarantee
an overall acceptance rate.  This is NOT an adaptive MCMC algorithm.}

\item{max_autoTune_count}{integer.  The maximum number of pilot runs allowed if auto-tuning.}

\item{a_u, }{b_u, a_s, b_s, a_v, b_v, a_r, b_r, a_a, b_a numeric.  Hyperparameters.}
}
\value{
Object of class 'eClustaLSEC_HMC'.
}
\description{
'eClustaLSEC_HMC' implements Hamiltonian Monte Carlo (HMC) for clustering edges of a network using a latent space approach
}
